networks:
  internal:
  edge:


volumes:
  db_data:
  redis_data:
  nginx:


services:
  db:
    image: mongo:7
    restart: always
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 5s
      retries: 5
    volumes:
      - ./db_data:/data/db
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER?Variable not set}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD?Variable not set}
    networks: [ internal ]

  url_shortener:
    image: 'url_shortener:${TAG-latest}'
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check" ]
      interval: 100s
      timeout: 5s
      retries: 5
    env_file: .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - PROJECT_NAME=${PROJECT_NAME?Variable not set}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - MONGODB_USER=${MONGODB_USER?Variable not set}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD?Variable not set}
      - MONGODB_SERVER=${MONGODB_SERVER?Variable not set}
      - MONGODB_PORT=${MONGODB_PORT?Variable not set}
      - MONGODB_DB=${MONGODB_DB?Variable not set}
      - MONGODB_COLLECTION=${MONGODB_COLLECTION?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
    build:
      context: url_shortener_service
      dockerfile: Dockerfile
    networks: [ internal ]

  redis:
    image: redis:7-alpine
    command: >
      redis-server --save 60 1 --appendonly yes --loglevel warning
    healthcheck:
      test: [ "CMD", "redis-cli", "PING" ]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - ./redis_data:/data
    networks: [ internal ]

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/app.conf:/etc/nginx/conf.d/app.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/empty.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - url_shortener
    networks: [ internal, edge ]

  adminer:
    image: adminer
    restart: always
    depends_on:
      - db
    networks: [ internal, edge ]

  dozzle:
    image: amir20/dozzle:latest
    restart: always
    environment:
      - DOZZLE_BASE=/dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks: [ internal ]
